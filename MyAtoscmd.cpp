//===================================================================
// COPYRIGHT Atos 2023-07-27
//===================================================================
// MyAtoscmd.cpp
// Header definition of class MyAtoscmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2023-07-27 Creation: Code generated by the 3DS wizard
//===================================================================

#include "MyAtoscmd.h"
#include "TestAutosDlg.h"
#include "CATBaseUnknown.h"
#include "CATCreateExternalObject.h"
#include "CATIndicationAgent.h"
#include"CATApplicationFrame.h"
#include "CATDialogAgent.h"
#include "CATDlgFile.h"
#include "CATCommand.h"
#include "CATPathElementAgent.h"
#include "CATStateCancelNotification.h"
#include "CATDialog.h"
#include"CATPathElement.h"
#include"CATIBuildPath.h"
#include "CATFrmEditor.h"
#include"CATHSO.h"
#include"CATIMmiMechanicalFeature.h"
#include"CATIGSMUseLinePtPt.h"
#include"CATIGSMUseFactory.h"
#include"CATGeoFactory.h"
#include "CATIModelEvents.h"
#include"CATIMmiPrtContainer.h"
#include"CATIGSMTool.h"
#include"CATIMmiUsePrtPart.h"
#include"CATIMmiUseBasicInsertion.h"
#include"CATISO.h"
#include"DataCommonProtocolServices.h"
#include"CATIUseEntity.h"
#include"CATIAlias.h"
//Visualization Framework
#include "CATCreate.h"        
#include "CATIModelEvents.h"  
#include "CATPathElement.h"
#include "CATMathPlane.h" 
#include "CATIRedrawEvent.h"
#include"CATCSO.h"
#include "CATIMfPoint.h"
#include "CATIBasicTool.h"
#include"CATUnicodeString.h"
// Should be a data model 
#define EPSILON 10E-6
//CAASystem.edu Framework

#include <iostream>
using namespace std;

CATCreateClass(MyAtoscmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
MyAtoscmd::MyAtoscmd() : CATStateCommand("MyAtoscmd")
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat

{
	_pFPSelectAgent = NULL;
	_pSPSelectAgent = NULL;
	pOKAgent = NULL;
	pCancelAgent = NULL;
	
	_pUIActiveObject = NULL;
	spFPMechFeat1 = NULL;
	spSPMechFeat2 = NULL;
	//piGeomFactory = NULL;
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
MyAtoscmd::~MyAtoscmd()
{
	if (pDlg != NULL) 
	{
		
		pDlg->RequestDelayedDestruction();
		pDlg = NULL; 
	}
	if (pOKAgent != NULL) 
	{ 
		pOKAgent->RequestDelayedDestruction();
		pOKAgent = NULL; 
	}
	if (pCancelAgent != NULL) 
	{
		pCancelAgent->RequestDelayedDestruction(); 
		pCancelAgent = NULL;
	}
	
	if (NULL != _pUIActiveObject)
	{
		_pUIActiveObject->Release();
		_pUIActiveObject = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void MyAtoscmd::BuildGraph()
{
	//Creating Dialog box
	CATApplicationFrame* pFrame = NULL;
	CATDialog* pParent = NULL;
	pFrame = CATApplicationFrame::GetFrame();
	if (NULL != pFrame)
	{
		pParent = (CATDialog*)pFrame->GetMainWindow();
	}

	pDlg = new TestAutosDlg(pParent, "Atos Line Dlg");
	if (NULL != pDlg)
	{
		pDlg->Build();
		pDlg->SetVisibility(CATDlgShow);
	}
	//Creating Dialog Agents
	CATDialogAgent* pOKAgent = new CATDialogAgent("OK");
	{
		if (NULL != pOKAgent)
		{
			pOKAgent->AcceptOnNotify(pDlg, pDlg->GetDiaOKNotification());
		}

	}
	CATDialogAgent* pCancelAgent = new CATDialogAgent("CANCEL");
	{
		if (NULL != pCancelAgent)
		{
			pCancelAgent->AcceptOnNotify(pDlg, pDlg->GetDiaCANCELNotification());
			pCancelAgent->AcceptOnNotify(pDlg, pDlg->GetDiaCLOSENotification());
		}

	}
	
	// Define Selection Agent
	_pFPSelectAgent = new CATPathElementAgent("FPSelectionAgent");
	_pFPSelectAgent->AddElementType("CATIMfPoint");
	//Define the Behaviours
	_pFPSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);
	//AddCSOClient(pSelectAgent);
	
	_pSPSelectAgent = new CATPathElementAgent("SPPathElementAgent");
	_pSPSelectAgent->AddElementType("CATIMfPoint");

	_pSPSelectAgent->SetBehavior(CATDlgEngWithPSO |
		CATDlgEngWithPrevaluation |
		CATDlgEngRepeat);

	//Creating the States
	
	CATDialogState* pInitialState = GetInitialState("First State");
	CATDialogState* pSecondState = AddDialogState("stEndPoint");
	CATDialogState* pThirdState = AddDialogState("OK Selection");

	//Add Agents to States
		pInitialState->AddDialogAgent(_pFPSelectAgent);
		pInitialState->AddDialogAgent(pCancelAgent);
		pSecondState->AddDialogAgent(_pSPSelectAgent);
		pThirdState->AddDialogAgent(pOKAgent);
		pThirdState->AddDialogAgent(pCancelAgent);
		pSecondState->AddDialogAgent(pCancelAgent);
		

	// Set transitions methods .
	AddTransition(pInitialState, pSecondState,
		IsOutputSetCondition(_pFPSelectAgent),
		Action((ActionMethod)&MyAtoscmd::OnFPPointSelection));
	AddTransition(pSecondState, pThirdState,
		IsOutputSetCondition(_pSPSelectAgent),
		Action((ActionMethod)&MyAtoscmd::OnSPPointSelection));
	AddTransition(pThirdState,NULL,
		IsOutputSetCondition(pOKAgent),
		Action((ActionMethod)&MyAtoscmd::OnOK));
	AddTransition(pThirdState, NULL,
		IsOutputSetCondition(pOKAgent),
		Action((ActionMethod)&MyAtoscmd::Cancel));
	AddTransition(pSecondState, NULL,
		IsOutputSetCondition(pOKAgent),
		Action((ActionMethod)&MyAtoscmd::Cancel));
	AddTransition(pInitialState, NULL,
		IsOutputSetCondition(pOKAgent),
		Action((ActionMethod)&MyAtoscmd::Cancel));



}
CATBoolean MyAtoscmd::OnOK(void* data)
{
	HRESULT rc = S_OK;
	
	CATIGSMUseLinePtPt_var pGeomline;
	CATIGSMUseFactory_var piGeomFactory;
		CATIMmiPrtContainer_var oThePrtCont=NULL_var;
	spFPMechFeat1->GetPrtContainer(oThePrtCont);
	if (NULL_var != oThePrtCont)
	{
		 piGeomFactory = oThePrtCont;
		if (piGeomFactory != NULL)
		{
			pGeomline = piGeomFactory->CreateLine(spFPMechFeat1, spSPMechFeat2);
		}
	}
	
	
	CATIGSMTool* piGSMTool = NULL;
	rc = LookingForAnyTypeOfBody(&piGSMTool);
	// Insert in geometrical set 
	CATIMmiUseBasicInsertion_var hBasicInsertion = pGeomline;

	hBasicInsertion->InsertInside(piGSMTool);

	//updates the display
	/*CATFrmEditor* editor = GetEditor();
	if (NULL != editor)
	{
		//_pISO = editor->GetISO();
		CATPathElement path = editor->GetUIActiveObject();
		if (0 != path.GetSize())
		{
			_pUIActiveObject = path[path.GetSize() - 1];
			if (NULL != _pUIActiveObject)
			{
				// Keep a interface pointer = AddRef to do
				_pUIActiveObject->AddRef();
			}
		}
	}*/
	
	CATIUseEntity_var spUseEntPad = pGeomline;
	DataCommonProtocolServices::Update(spUseEntPad);


		if (pOKAgent != NULL) //return FALSE;
		{

			pDlg->SetVisibility(CATDlgHide);
		}
		else {
			rc = E_UNEXPECTED;
		}

		return TRUE;
	
}
CATStatusChangeRC MyAtoscmd::Cancel(CATCommand* iCommand, CATNotification* iNotif)
{
	HRESULT RC = S_OK;
	//TestAutosDlg* pDlg;

	if (pDlg != NULL)
	{
		pDlg->SetVisibility(CATDlgHide);
		//pDlg->RequestDelayedDestruction();
	}
	if (iNotif != NULL && iNotif->IsAKindOf("CATStateCancelNotification"))
	{
		if (((CATStateCancelNotification*)iNotif)->GetType() == CATStateCancelNotification::Interrupt)
			ExecuteUndoAtEnd();
	}
	return (CATStatusChangeRCCompleted);
}

CATBoolean MyAtoscmd::OnFPPointSelection(void* data)
{
	CATBoolean rc = FALSE;

	CATBaseUnknown* pPathElmUnk1 = _pFPSelectAgent->GetElementValue();
	_pFPSelectAgent->InitializeAcquisition();
	spFPMechFeat1 = pPathElmUnk1;
	
	if (NULL_var == spFPMechFeat1)
	{
		return FALSE;
	}
	
	CATIAlias_var spFPPointname = spFPMechFeat1;

	CATUnicodeString FPname=spFPPointname->GetAlias().ConvertToChar();
	pDlg->setFPName(FPname);
	return TRUE;
}
CATBoolean MyAtoscmd::OnSPPointSelection(void* data)
{
	CATBoolean rc = FALSE;

	CATBaseUnknown* pPathElmUnk2 = _pSPSelectAgent->GetElementValue();
	_pSPSelectAgent->InitializeAcquisition();
	spSPMechFeat2 = pPathElmUnk2;
	if (NULL_var == spSPMechFeat2)
	{
		return FALSE;
	}
	CATIAlias_var spSPPointname = spSPMechFeat2;

	CATUnicodeString SPname = spSPPointname->GetAlias().ConvertToChar();
	pDlg->setSPName(SPname);
	return TRUE;
}
HRESULT MyAtoscmd::LookingForAnyTypeOfBody(CATIGSMTool** piGsmtool)
{
	//if ((NULL == piGsmtool) || (NULL == _editor)) return E_FAIL;

	HRESULT rc = E_FAIL;
	CATFrmEditor* _editor = GetEditor();

	*piGsmtool = NULL;

	CATIMmiUsePrtPart* pIPrtPart = NULL;
	CATPathElement PathAct = _editor->GetUIActiveObject();

	rc = PathAct.Search(IID_CATIMmiUsePrtPart, (void**)&pIPrtPart);

	if (SUCCEEDED(rc) && (NULL != pIPrtPart))
	{
		CATBoolean ToolToCreate = TRUE;

		CATIBasicTool_var CurrentTool = NULL_var;
		rc = pIPrtPart->GetInWorkObjectTool(CurrentTool);

		if (SUCCEEDED(rc) && NULL_var != CurrentTool)
		{
			// is it a GSMTool or an hybrid body ?
			CATIGSMTool* pIGSMToolOnCurrentTool = NULL;
			rc = CurrentTool->QueryInterface(IID_CATIGSMTool, (void**)&pIGSMToolOnCurrentTool);
			if (SUCCEEDED(rc))
			{
				// Ok we have found a valid body
				ToolToCreate = FALSE;

				*piGsmtool = pIGSMToolOnCurrentTool;
			}
		}

		/*if (TRUE == ToolToCreate)
		{
			rc = CreateTool(pIPrtPart, piGsmtool);
		}*/

	}

	if (NULL != pIPrtPart)
	{
		pIPrtPart->Release();
		pIPrtPart = NULL;
	}

	return rc;
}

